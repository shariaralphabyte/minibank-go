{
	"info": {
		"name": "MiniBankGo API",
		"description": "Complete API collection for MiniBankGo - Secure Micro-Banking Backend System",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{jwt_token}}",
				"type": "string"
			}
		]
	},
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:8080",
			"type": "string"
		},
		{
			"key": "jwt_token",
			"value": "",
			"type": "string"
		},
		{
			"key": "user_id",
			"value": "",
			"type": "string"
		},
		{
			"key": "admin_token",
			"value": "",
			"type": "string"
		}
	],
	"item": [
		{
			"name": "Health Check",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response has status healthy\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.status).to.eql(\"healthy\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/api/health",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"health"
					]
				}
			}
		},
		{
			"name": "Authentication",
			"item": [
				{
					"name": "Register User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"User created successfully\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql(\"User registered successfully\");",
									"    pm.collectionVariables.set(\"user_id\", jsonData.user.id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"john.doe@example.com\",\n    \"phone\": \"1234567890\",\n    \"password\": \"password123\",\n    \"first_name\": \"John\",\n    \"last_name\": \"Doe\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/register",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"register"
							]
						}
					}
				},
				{
					"name": "Register Admin User (Auto Admin)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Admin user created successfully\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql(\"User registered successfully\");",
									"    pm.expect(jsonData.admin_status).to.exist;",
									"    pm.expect(jsonData.user.is_admin).to.eql(true);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"admin@minibank.com\",\n    \"phone\": \"9876543210\",\n    \"password\": \"admin123\",\n    \"first_name\": \"Admin\",\n    \"last_name\": \"User\",\n    \"admin_code\": \"MINIBANK_ADMIN_2025\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/register",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"register"
							]
						}
					}
				},
				{
					"name": "Login User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Login successful and token received\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.token).to.exist;",
									"    pm.collectionVariables.set(\"jwt_token\", jsonData.token);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"john.doe@example.com\",\n    \"password\": \"password123\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"login"
							]
						}
					}
				},
				{
					"name": "Login Admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Admin login successful\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.token).to.exist;",
									"    pm.collectionVariables.set(\"admin_token\", jsonData.token);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"admin@minibank.com\",\n    \"password\": \"admin123\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"login"
							]
						}
					}
				},
				{
					"name": "Withdraw Money",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Withdrawal successful message\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql(\"Withdrawal successful\");",
									"});",
									"",
									"pm.test(\"New balance exists\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.new_balance).to.exist;",
									"});",
									"",
									"pm.test(\"Transaction details are correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.transaction).to.exist;",
									"    pm.expect(jsonData.transaction.id).to.exist;",
									"    pm.expect(jsonData.transaction.amount).to.eql(100);",
									"    pm.expect(jsonData.transaction.type).to.eql(\"withdraw\");",
									"    pm.expect(jsonData.transaction.status).to.exist;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwt_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"amount\": 100,\n    \"description\": \"Regular withdrawal\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/transactions/withdraw",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"transactions",
								"withdraw"
							]
						}
					}
				}
			]
		},
		{
			"name": "User Profile",
			"item": [
				{
					"name": "Get Profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Profile data received\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.email).to.exist;",
									"    pm.expect(jsonData.first_name).to.exist;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwt_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/user/profile",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"user",
								"profile"
							]
						}
					}
				},
				{
					"name": "Update Profile",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwt_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"first_name\": \"John Updated\",\n    \"last_name\": \"Doe Updated\",\n    \"phone\": \"1234567891\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/user/profile",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"user",
								"profile"
							]
						}
					}
				}
			]
		},
		{
			"name": "KYC Management",
			"item": [
				{
					"name": "Submit KYC",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"KYC submitted successfully\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql(\"KYC submitted successfully\");",
									"    pm.expect(jsonData.kyc_id).to.exist;",
									"});",
									"",
									"// Check for encryption errors",
									"pm.test(\"No encryption errors\", function () {",
									"    pm.expect(pm.response.text()).to.not.include(\"Failed to encrypt\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwt_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"pan\": \"ABCDE1234F\",\n    \"aadhaar_number\": \"123456789012\",\n    \"date_of_birth\": \"1990-01-15T00:00:00Z\",\n    \"address\": \"123 Main Street, Apartment 4B\",\n    \"city\": \"Mumbai\",\n    \"state\": \"Maharashtra\",\n    \"pin_code\": \"400001\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/kyc/submit",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"kyc",
								"submit"
							]
						}
					}
				},
				{
					"name": "Get KYC Status",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwt_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/kyc/status",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"kyc",
								"status"
							]
						}
					}
				}
			]
		},
		{
			"name": "Transactions",
			"item": [
				{
					"name": "Get Transactions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Transactions array exists\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.transactions).to.be.an('array');",
									"});",
									"",
									"pm.test(\"Pagination data exists\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.total).to.exist;",
									"    pm.expect(jsonData.page).to.exist;",
									"    pm.expect(jsonData.limit).to.exist;",
									"});",
									"",
									"pm.test(\"Transaction fields are correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    if (jsonData.transactions.length > 0) {",
									"        var transaction = jsonData.transactions[0];",
									"        pm.expect(transaction.id).to.exist;",
									"        pm.expect(transaction.amount).to.exist;",
									"        pm.expect(transaction.type).to.exist;",
									"        pm.expect(transaction.status).to.exist;",
									"        pm.expect(transaction.created_at).to.exist;",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwt_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/transactions?page=1&limit=20",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"transactions"
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "limit",
									"value": "20"
								}
							]
						}
					}
				},
				{
					"name": "Deposit Money",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Deposit successful\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql(\"Deposit successful\");",
									"    pm.expect(jsonData.new_balance).to.exist;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwt_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"amount\": 10000,\n    \"description\": \"Initial deposit\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/transactions/deposit",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"transactions",
								"deposit"
							]
						}
					}
				},
				{
					"name": "Verify Recipient User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Recipient user exists\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.user).to.exist;",
									"    pm.expect(jsonData.user.email).to.eql(\"admin@minibank.com\");",
									"    pm.expect(jsonData.user.is_active).to.be.true;",
									"    pm.collectionVariables.set(\"recipient_id\", jsonData.user.id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{admin_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/admin/users?email=admin@minibank.com",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"admin",
								"users"
							],
							"query": [
								{
									"key": "email",
									"value": "admin@minibank.com"
								}
							]
						}
					}
				},
				{
					"name": "Verify Recipient Account Status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Recipient account status is active\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.account).to.exist;",
									"    pm.expect(jsonData.account.status).to.eql(\"active\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{admin_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/admin/accounts/{{recipient_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"admin",
								"accounts",
								"{{recipient_id}}"
							]
						}
					}
				},
				{
					"name": "Transfer Money",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check response status",
									"var responseStatus = pm.response.code;",
									"",
									"if (responseStatus === 201) {",
									"    // Successful transfer",
									"    pm.test(\"Transfer successful\", function () {",
									"        var jsonData = pm.response.json();",
									"        pm.expect(jsonData.message).to.eql(\"Transfer successful\");",
									"        pm.expect(jsonData.new_balance).to.exist;",
									"        pm.expect(jsonData.transaction_id).to.exist;",
									"    });",
									"    ",
									"    pm.test(\"Transfer details correct\", function () {",
									"        var jsonData = pm.response.json();",
									"        pm.expect(jsonData.to_user_email).to.eql(\"admin@minibank.com\");",
									"        pm.expect(jsonData.amount).to.eql(1000);",
									"    });",
									"} else if (responseStatus === 400) {",
									"    // Error case",
									"    pm.test(\"Error response received\", function () {",
									"        var jsonData = pm.response.json();",
									"        pm.expect(jsonData.error).to.exist;",
									"        pm.expect(jsonData.error).to.include(\"Failed to create recipient transaction\");",
									"    });",
									"    ",
									"    pm.test(\"No transaction created\", function () {",
									"        var jsonData = pm.response.json();",
									"        pm.expect(jsonData.transaction_id).to.not.exist;",
									"    });",
									"} else {",
									"    pm.test.fail(\"Unexpected status code: \" + responseStatus);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwt_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"to_user_email\": \"admin@minibank.com\",\n    \"amount\": 1000,\n    \"description\": \"Payment for services\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/transactions/transfer",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"transactions",
								"transfer"
							]
						}
					}
				},
				{
					"name": "Withdraw Money",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Withdrawal successful message\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql(\"Withdrawal successful\");",
									"});",
									"",
									"pm.test(\"New balance exists\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.new_balance).to.exist;",
									"});",
									"",
									"pm.test(\"Transaction details are correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.transaction).to.exist;",
									"    pm.expect(jsonData.transaction.id).to.exist;",
									"    pm.expect(jsonData.transaction.amount).to.eql(100);",
									"    pm.expect(jsonData.transaction.type).to.eql(\"withdraw\");",
									"    pm.expect(jsonData.transaction.status).to.exist;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwt_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"amount\": 100,\n    \"description\": \"Regular withdrawal\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/transactions/withdraw",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"transactions",
								"withdraw"
							]
						}
					}
				}
			]
		},
		{
			"name": "Admin Operations",
			"item": [
				{
					"name": "Get Pending KYC",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{admin_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/admin/kyc/pending",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"admin",
								"kyc",
								"pending"
							]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response is a JSON array\", function () {",
									"    pm.response.to.be.json;",
									"    pm.expect(pm.response.json()).to.be.an('array');",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"if (jsonData && jsonData.length > 0) {",
									"    pm.test(\"First item in array is an object and has correct properties\", function () {",
									"        var firstItem = jsonData[0];",
									"        pm.expect(firstItem).to.be.an('object');",
									"        pm.expect(firstItem).to.have.property('id').and.to.be.a('number');",
									"        pm.expect(firstItem).to.have.property('user_id').and.to.be.a('number');",
									"        pm.expect(firstItem).to.have.property('status', 'pending');",
									"        pm.expect(firstItem).to.have.property('user').and.to.be.an('object');",
									"    });",
									"",
									"    pm.test(\"User object in first item has correct properties\", function () {",
									"        var userObject = jsonData[0].user;",
									"        pm.expect(userObject).to.have.property('id').and.to.be.a('number');",
									"        pm.expect(userObject).to.have.property('email').and.to.be.a('string');",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Verify KYC - Approve",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{admin_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"kyc_id\": 1,\n    \"status\": \"verified\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/admin/kyc/verify",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"admin",
								"kyc",
								"verify"
							]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response message is correct for approve\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql(\"KYC verification updated successfully\");",
									"});",
									"",
									"pm.test(\"Status in response is 'verified'\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql(\"verified\");",
									"});",
									"",
									"pm.test(\"kyc_id exists and is a number\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.kyc_id).to.exist.and.to.be.a('number');",
									"});",
									"",
									"pm.test(\"user_id exists and is a number\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.user_id).to.exist.and.to.be.a('number');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Verify KYC - Reject",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{admin_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"kyc_id\": 1,\n    \"status\": \"rejected\",\n    \"rejection_reason\": \"Document quality is poor\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/admin/kyc/verify",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"admin",
								"kyc",
								"verify"
							]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response message is correct for reject\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql(\"KYC verification updated successfully\");",
									"});",
									"",
									"pm.test(\"Status in response is 'rejected'\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql(\"rejected\");",
									"});",
									"",
									"pm.test(\"kyc_id exists and is a number\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.kyc_id).to.exist.and.to.be.a('number');",
									"});",
									"",
									"pm.test(\"user_id exists and is a number\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.user_id).to.exist.and.to.be.a('number');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Get Audit Logs",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{admin_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/admin/audit-logs?page=1&limit=50",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"admin",
								"audit-logs"
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "limit",
									"value": "50"
								}
							]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response is a JSON object\", function () {",
									"    pm.response.to.be.json;",
									"    pm.expect(pm.response.json()).to.be.an('object');",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Pagination fields are present and have correct types\", function () {",
									"    pm.expect(jsonData).to.have.property('audit_logs').and.to.be.an('array');",
									"    pm.expect(jsonData).to.have.property('page').and.to.be.a('number');",
									"    pm.expect(jsonData).to.have.property('limit').and.to.be.a('number');",
									"    pm.expect(jsonData).to.have.property('total').and.to.be.a('number');",
									"});",
									"",
									"if (jsonData.audit_logs && jsonData.audit_logs.length > 0) {",
									"    pm.test(\"First audit log item has correct structure and types\", function () {",
									"        var firstLog = jsonData.audit_logs[0];",
									"        pm.expect(firstLog).to.be.an('object');",
									"        pm.expect(firstLog).to.have.property('id').and.to.be.a('number');",
									"        pm.expect(firstLog).to.have.property('action').and.to.be.a('string');",
									"        pm.expect(firstLog).to.have.property('resource').and.to.be.a('string');",
									"        pm.expect(firstLog).to.have.property('details').and.to.be.a('string');",
									"        pm.expect(firstLog).to.have.property('created_at').and.to.be.a('string');",
									"        // Validate created_at is a valid date string (optional, but good practice)",
									"        pm.expect(new Date(firstLog.created_at).toString()).to.not.equal('Invalid Date');",
									"",
									"        if (firstLog.user_id !== null) {",
									"            pm.expect(firstLog).to.have.property('user').and.to.be.an('object');",
									"            var userObject = firstLog.user;",
									"            pm.expect(userObject).to.have.property('id').and.to.be.a('number');",
									"            pm.expect(userObject).to.have.property('email').and.to.be.a('string');",
									"        }",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Get All Users",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{admin_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/admin/users?page=1&limit=20",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"admin",
								"users"
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "limit",
									"value": "20"
								}
							]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response is a JSON object\", function () {",
									"    pm.response.to.be.json;",
									"    pm.expect(pm.response.json()).to.be.an('object');",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Pagination fields are present and have correct types\", function () {",
									"    pm.expect(jsonData).to.have.property('users').and.to.be.an('array');",
									"    pm.expect(jsonData).to.have.property('page').and.to.be.a('number');",
									"    pm.expect(jsonData).to.have.property('limit').and.to.be.a('number');",
									"    pm.expect(jsonData).to.have.property('total').and.to.be.a('number');",
									"});",
									"",
									"if (jsonData.users && jsonData.users.length > 0) {",
									"    pm.test(\"First user object has correct structure, types, and no password\", function () {",
									"        var firstUser = jsonData.users[0];",
									"        pm.expect(firstUser).to.be.an('object');",
									"        pm.expect(firstUser).to.have.property('id').and.to.be.a('number');",
									"        pm.expect(firstUser).to.have.property('email').and.to.be.a('string');",
									"        pm.expect(firstUser).to.have.property('is_admin').and.to.be.a('boolean');", // Added is_admin check
									"        pm.expect(firstUser).to.have.property('first_name').and.to.be.a('string');",
									"        pm.expect(firstUser).to.have.property('last_name').and.to.be.a('string');",
									"        pm.expect(firstUser).to.have.property('balance').and.to.be.a('number');",
									"        pm.expect(firstUser).to.have.property('is_active').and.to.be.a('boolean');",
									"        pm.expect(firstUser).to.have.property('kyc_status').and.to.be.a('string');",
									"        pm.expect(firstUser).to.have.property('created_at').and.to.be.a('string');",
									"        // Validate created_at is a valid date string",
									"        pm.expect(new Date(firstUser.created_at).toString()).to.not.equal('Invalid Date');",
									"        // Ensure password is not present",
									"        pm.expect(firstUser).to.not.have.property('password');",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					]
				}
			]
		},
		{
			"name": "Error Testing",
			"item": [
				{
					"name": "Test Encryption - Invalid KYC Data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Invalid KYC data validation\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.error).to.exist;",
									"    pm.expect(jsonData.error).to.include(\"invalid\");",
									"});",
									"",
									"pm.test(\"No encryption errors\", function () {",
									"    pm.expect(pm.response.text()).to.not.include(\"encryption\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwt_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"pan\": \"INVALID_PAN_FORMAT\",\n    \"aadhaar_number\": \"123\",\n    \"date_of_birth\": \"1990-01-15T00:00:00Z\",\n    \"address\": \"123 Main Street\",\n    \"city\": \"Mumbai\",\n    \"state\": \"Maharashtra\",\n    \"pin_code\": \"400001\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/kyc/submit",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"kyc",
								"submit"
							]
						}
					}
				},
				{
					"name": "Test Rate Limiting",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 429\", function () {",
									"    pm.response.to.have.status(429);",
									"});",
									"",
									"pm.test(\"Rate limit exceeded\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.error).to.exist;",
									"    pm.expect(jsonData.error).to.include(\"rate limit\");",
									"});",
									"",
									"pm.test(\"Retry-After header exists\", function () {",
									"    pm.response.to.have.header(\"Retry-After\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/health",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"health"
							]
						}
					}
				},
				{
					"name": "Test Invalid Token",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer invalid_token_here"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/user/profile",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"user",
								"profile"
							]
						}
					}
				},
				{
					"name": "Test Insufficient Balance",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwt_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"amount\": 999999,\n    \"description\": \"Large withdrawal\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/transactions/withdraw",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"transactions",
								"withdraw"
							]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Error message indicates insufficient funds\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.error).to.exist;",
									"    pm.expect(jsonData.error).to.match(/insufficient balance/i);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Test Daily Limit",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwt_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"amount\": 51000,\n    \"description\": \"Over daily limit\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/transactions/withdraw",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"transactions",
								"withdraw"
							]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Error message indicates daily limit exceeded\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.error).to.exist;",
									"    pm.expect(jsonData.error).to.match(/daily withdrawal limit/i);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Test AML - Rapid Small Transfers",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwt_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"to_user_email\": \"admin@minibank.com\",\n    \"amount\": 500,\n    \"description\": \"Small transfer 1\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/transactions/transfer",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"transactions",
								"transfer"
							]
						}
					}
				},
				{
					"name": "Transfer Money to Non-Existent User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Response has error message for non-existent user\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.error).to.exist;",
									"    pm.expect(jsonData.error).to.eql(\"Recipient user not found\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwt_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"to_user_id\": 9999999,\n    \"amount\": 10,\n    \"description\": \"Test transfer to non-existent user\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/transactions/transfer",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"transactions",
								"transfer"
							]
						}
					}
				}
			]
		},
		{
			"name": "Load Testing",
			"item": [
				{
					"name": "Concurrent Deposits",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwt_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"amount\": 100,\n    \"description\": \"Load test deposit\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/transactions/deposit",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"transactions",
								"deposit"
							]
						}
					}
				}
			]
		},
		{
			"name": "Debug Token Claims",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Token claims exist\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.token_claims).to.exist;",
							"    pm.expect(jsonData.database_user).to.exist;",
							"});",
							"",
							"pm.test(\"Check admin status match\", function () {",
							"    var jsonData = pm.response.json();",
							"    console.log('Token admin status:', jsonData.token_claims.is_admin);",
							"    console.log('Database admin status:', jsonData.database_user.is_admin);",
							"    console.log('Admin status match:', jsonData.admin_status_match);",
							"    ",
							"    if (!jsonData.admin_status_match) {",
							"        console.log('WARNING: Token and database admin status do not match!');",
							"    }",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{admin_token}}",
						"description": "Use admin token to debug admin claims"
					}
				],
				"url": {
					"raw": "{{base_url}}/api/debug/token",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"debug",
						"token"
					]
				},
				"description": "Debug endpoint to check JWT token claims and compare with database user data"
			}
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}